{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\Novel-Effect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\Novel-Effect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\Novel-Effect\\\\src\\\\components\\\\ManageNovels.js\";\nimport React, { useState, useEffect } from \"react\";\nimport NovelForm from \"./NovelForm\";\nimport * as novelApi from \"../api/novelsApi\";\nimport { toast } from \"react-toastify\";\n\nconst ManageNovels = props => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        errors = _useState2[0],\n        setErrors = _useState2[1];\n\n  const _useState3 = useState({\n    id: null,\n    slug: \"\",\n    name: \"\",\n    authorId: null,\n    description: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        novels = _useState4[0],\n        setNovels = _useState4[1];\n\n  useEffect(() => {\n    const slug = props.match.params.slug;\n\n    if (slug) {\n      novelApi.getNovelsBySlug(slug).then(_novels => setNovels(_novels));\n    }\n  }, [props.match.params.slug]);\n\n  function handleChange({\n    target\n  }) {\n    const updateNovels = _objectSpread({}, novels, {\n      [target.name]: target.value\n    });\n\n    setNovels(updateNovels);\n  }\n\n  function formIsValid() {\n    const _error = {};\n    if (!novels.name) _error.name = \"Name is required\";\n    if (!novels.authorId) _error.authorId = \"Author is required\";\n    if (!novels.description) _error.description = \"Description is required\";\n    setErrors(_error);\n    return Object.keys(_error).length === 0;\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    novelApi.saveNovels(novels).then(() => {\n      props.history.push(\"/novels\");\n      toast.success(\"Novels Added Successfully\");\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    style: {\n      marginLeft: \"151px\",\n      marginTop: \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Manage Novels\"), React.createElement(\"table\", {\n    className: \"table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(NovelForm, {\n    errors: errors,\n    novels: novels,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })));\n};\n\nexport default ManageNovels;","map":{"version":3,"sources":["C:\\Users\\shivani.pokhriyal\\Desktop\\Novel-Effect\\src\\components\\ManageNovels.js"],"names":["React","useState","useEffect","NovelForm","novelApi","toast","ManageNovels","props","errors","setErrors","id","slug","name","authorId","description","novels","setNovels","match","params","getNovelsBySlug","then","_novels","handleChange","target","updateNovels","value","formIsValid","_error","Object","keys","length","handleSubmit","event","preventDefault","saveNovels","history","push","success","marginLeft","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA,oBACFN,QAAQ,CAAC,EAAD,CADN;AAAA;AAAA,QACvBO,MADuB;AAAA,QACfC,SADe;;AAAA,qBAEFR,QAAQ,CAAC;AACnCS,IAAAA,EAAE,EAAE,IAD+B;AAEnCC,IAAAA,IAAI,EAAE,EAF6B;AAGnCC,IAAAA,IAAI,EAAE,EAH6B;AAInCC,IAAAA,QAAQ,EAAE,IAJyB;AAKnCC,IAAAA,WAAW,EAAE;AALsB,GAAD,CAFN;AAAA;AAAA,QAEvBC,MAFuB;AAAA,QAEfC,SAFe;;AAU9Bd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,IAAI,GAAGJ,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmBP,IAAhC;;AACA,QAAIA,IAAJ,EAAU;AACRP,MAAAA,QAAQ,CAACe,eAAT,CAAyBR,IAAzB,EAA+BS,IAA/B,CAAqCC,OAAD,IAAaL,SAAS,CAACK,OAAD,CAA1D;AACD;AACF,GALQ,EAKN,CAACd,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmBP,IAApB,CALM,CAAT;;AAOA,WAASW,YAAT,CAAsB;AAAEC,IAAAA;AAAF,GAAtB,EAAkC;AAChC,UAAMC,YAAY,qBAAQT,MAAR;AAAgB,OAACQ,MAAM,CAACX,IAAR,GAAeW,MAAM,CAACE;AAAtC,MAAlB;;AACAT,IAAAA,SAAS,CAACQ,YAAD,CAAT;AACD;;AACD,WAASE,WAAT,GAAuB;AACrB,UAAMC,MAAM,GAAG,EAAf;AACA,QAAI,CAACZ,MAAM,CAACH,IAAZ,EAAkBe,MAAM,CAACf,IAAP,GAAc,kBAAd;AAClB,QAAI,CAACG,MAAM,CAACF,QAAZ,EAAsBc,MAAM,CAACd,QAAP,GAAkB,oBAAlB;AACtB,QAAI,CAACE,MAAM,CAACD,WAAZ,EAAyBa,MAAM,CAACb,WAAP,GAAqB,yBAArB;AACzBL,IAAAA,SAAS,CAACkB,MAAD,CAAT;AACA,WAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAApB,KAA+B,CAAtC;AACD;;AAED,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAI,CAACP,WAAW,EAAhB,EAAoB;AACpBtB,IAAAA,QAAQ,CAAC8B,UAAT,CAAoBnB,MAApB,EAA4BK,IAA5B,CAAiC,MAAM;AACrCb,MAAAA,KAAK,CAAC4B,OAAN,CAAcC,IAAd,CAAmB,SAAnB;AACA/B,MAAAA,KAAK,CAACgC,OAAN,CAAc,2BAAd;AACD,KAHD;AAID;;AAED,SACE,0CACE;AAAI,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,EAAE,OAAd;AAAuBC,MAAAA,SAAS,EAAE;AAAlC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AACE,IAAA,MAAM,EAAE/B,MADV;AAEE,IAAA,MAAM,EAAEO,MAFV;AAGE,IAAA,QAAQ,EAAEO,YAHZ;AAIE,IAAA,QAAQ,EAAES,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAaD,CApDD;;AAsDA,eAAezB,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport NovelForm from \"./NovelForm\";\r\nimport * as novelApi from \"../api/novelsApi\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ManageNovels = (props) => {\r\n  const [errors, setErrors] = useState({});\r\n  const [novels, setNovels] = useState({\r\n    id: null,\r\n    slug: \"\",\r\n    name: \"\",\r\n    authorId: null,\r\n    description: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const slug = props.match.params.slug;\r\n    if (slug) {\r\n      novelApi.getNovelsBySlug(slug).then((_novels) => setNovels(_novels));\r\n    }\r\n  }, [props.match.params.slug]);\r\n\r\n  function handleChange({ target }) {\r\n    const updateNovels = { ...novels, [target.name]: target.value };\r\n    setNovels(updateNovels);\r\n  }\r\n  function formIsValid() {\r\n    const _error = {};\r\n    if (!novels.name) _error.name = \"Name is required\";\r\n    if (!novels.authorId) _error.authorId = \"Author is required\";\r\n    if (!novels.description) _error.description = \"Description is required\";\r\n    setErrors(_error);\r\n    return Object.keys(_error).length === 0;\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (!formIsValid()) return;\r\n    novelApi.saveNovels(novels).then(() => {\r\n      props.history.push(\"/novels\");\r\n      toast.success(\"Novels Added Successfully\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2 style={{ marginLeft: \"151px\", marginTop: \"20px\" }}>Manage Novels</h2>\r\n      <table className=\"table\">\r\n        <NovelForm\r\n          errors={errors}\r\n          novels={novels}\r\n          onChange={handleChange}\r\n          onSubmit={handleSubmit}\r\n        />\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManageNovels;\r\n"]},"metadata":{},"sourceType":"module"}