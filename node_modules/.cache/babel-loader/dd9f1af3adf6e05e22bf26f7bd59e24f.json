{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\kitchen-stories\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.REACT_APP_API_URL + \"/novels/\";\nexport function getNovels() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\nexport function getNovelsBySlug(slug) {\n  return fetch(baseUrl + \"?slug=\" + slug).then(response => {\n    if (!response.ok) throw new Error(\"Network response was not ok.\");\n    return response.json().then(novels => {\n      if (novels.length !== 1) throw new Error(\"Course not found: \" + slug);\n      return novels[0]; // should only find one course for a given slug, so return it.\n    });\n  }).catch(handleError);\n}\nexport function saveNovels(novels) {\n  return fetch(baseUrl + (novels.id || \"\"), {\n    method: novels.id ? \"PUT\" : \"POST\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(_objectSpread({}, novels, {\n      // Parse authorId to a number (in case it was sent as a string).\n      authorId: parseInt(novels.authorId, 10)\n    }))\n  }).then(handleResponse).catch(handleError);\n}\nexport function deleteCourse(courseId) {\n  return fetch(baseUrl + courseId, {\n    method: \"DELETE\"\n  }).then(handleResponse).catch(handleError);\n}","map":{"version":3,"sources":["C:\\Users\\shivani.pokhriyal\\Desktop\\kitchen-stories\\src\\api\\novelsApi.js"],"names":["handleResponse","handleError","baseUrl","process","env","REACT_APP_API_URL","getNovels","fetch","then","catch","getNovelsBySlug","slug","response","ok","Error","json","novels","length","saveNovels","id","method","headers","body","JSON","stringify","authorId","parseInt","deleteCourse","courseId"],"mappings":";AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,YAA5C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,UAAhD;AAEA,OAAO,SAASC,SAAT,GAAqB;AAC1B,SAAOC,KAAK,CAACL,OAAD,CAAL,CAAeM,IAAf,CAAoBR,cAApB,EAAoCS,KAApC,CAA0CR,WAA1C,CAAP;AACD;AAED,OAAO,SAASS,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAOJ,KAAK,CAACL,OAAO,GAAG,QAAV,GAAqBS,IAAtB,CAAL,CACJH,IADI,CACEI,QAAD,IAAc;AAClB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AAClB,WAAOF,QAAQ,CAACG,IAAT,GAAgBP,IAAhB,CAAsBQ,MAAD,IAAY;AACtC,UAAIA,MAAM,CAACC,MAAP,KAAkB,CAAtB,EAAyB,MAAM,IAAIH,KAAJ,CAAU,uBAAuBH,IAAjC,CAAN;AACzB,aAAOK,MAAM,CAAC,CAAD,CAAb,CAFsC,CAEpB;AACnB,KAHM,CAAP;AAID,GAPI,EAQJP,KARI,CAQER,WARF,CAAP;AASD;AAED,OAAO,SAASiB,UAAT,CAAoBF,MAApB,EAA4B;AACjC,SAAOT,KAAK,CAACL,OAAO,IAAIc,MAAM,CAACG,EAAP,IAAa,EAAjB,CAAR,EAA8B;AACxCC,IAAAA,MAAM,EAAEJ,MAAM,CAACG,EAAP,GAAY,KAAZ,GAAoB,MADY;AACJ;AACpCE,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF+B;AAGxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,mBACDR,MADC;AAEJ;AACAS,MAAAA,QAAQ,EAAEC,QAAQ,CAACV,MAAM,CAACS,QAAR,EAAkB,EAAlB;AAHd;AAHkC,GAA9B,CAAL,CASJjB,IATI,CASCR,cATD,EAUJS,KAVI,CAUER,WAVF,CAAP;AAWD;AAED,OAAO,SAAS0B,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAOrB,KAAK,CAACL,OAAO,GAAG0B,QAAX,EAAqB;AAAER,IAAAA,MAAM,EAAE;AAAV,GAArB,CAAL,CACJZ,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD","sourcesContent":["import { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.REACT_APP_API_URL + \"/novels/\";\n\nexport function getNovels() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\n\nexport function getNovelsBySlug(slug) {\n  return fetch(baseUrl + \"?slug=\" + slug)\n    .then((response) => {\n      if (!response.ok) throw new Error(\"Network response was not ok.\");\n      return response.json().then((novels) => {\n        if (novels.length !== 1) throw new Error(\"Course not found: \" + slug);\n        return novels[0]; // should only find one course for a given slug, so return it.\n      });\n    })\n    .catch(handleError);\n}\n\nexport function saveNovels(novels) {\n  return fetch(baseUrl + (novels.id || \"\"), {\n    method: novels.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify({\n      ...novels,\n      // Parse authorId to a number (in case it was sent as a string).\n      authorId: parseInt(novels.authorId, 10),\n    }),\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function deleteCourse(courseId) {\n  return fetch(baseUrl + courseId, { method: \"DELETE\" })\n    .then(handleResponse)\n    .catch(handleError);\n}\n"]},"metadata":{},"sourceType":"module"}