{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport Dispatcher from \"../appDispatcher\";\nimport actionType from \"../actions/actionTypes\";\nconst CHANGE_EVENT = \"change\";\nlet _novels = [];\n\nclass NovelStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getNovels() {\n    return _novels;\n  }\n\n  getNovelsBySlug(slug) {\n    return _novels.find(novels => novels.slug === slug);\n  }\n\n}\n\nconst store = new NovelStore();\nDispatcher.register(action => {\n  switch (action.actionType) {\n    case actionType.CREATE_NOVEL:\n      _novels.push(action.novel);\n\n      store.emitChange();\n      break;\n\n    default:\n  }\n});\nexport default store;","map":{"version":3,"sources":["C:\\Users\\shivani.pokhriyal\\Desktop\\Novel-Effect\\src\\stores\\novelStore.js"],"names":["EventEmitter","Dispatcher","actionType","CHANGE_EVENT","_novels","NovelStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getNovels","getNovelsBySlug","slug","find","novels","store","register","action","CREATE_NOVEL","push","novel"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,MAAMC,YAAY,GAAG,QAArB;AACA,IAAIC,OAAO,GAAG,EAAd;;AAEA,MAAMC,UAAN,SAAyBL,YAAzB,CAAsC;AACpCM,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AAC1B,SAAKC,EAAL,CAAQL,YAAR,EAAsBI,QAAtB;AACD;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAW;AAC7B,SAAKG,cAAL,CAAoBP,YAApB,EAAkCI,QAAlC;AACD;;AAEDI,EAAAA,UAAU,GAAG;AACX,SAAKC,IAAL,CAAUT,YAAV;AACD;;AAEDU,EAAAA,SAAS,GAAG;AACV,WAAOT,OAAP;AACD;;AAEDU,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpB,WAAOX,OAAO,CAACY,IAAR,CAAcC,MAAD,IAAYA,MAAM,CAACF,IAAP,KAAgBA,IAAzC,CAAP;AACD;;AAnBmC;;AAqBtC,MAAMG,KAAK,GAAG,IAAIb,UAAJ,EAAd;AACAJ,UAAU,CAACkB,QAAX,CAAqBC,MAAD,IAAY;AAC9B,UAAQA,MAAM,CAAClB,UAAf;AACE,SAAKA,UAAU,CAACmB,YAAhB;AACEjB,MAAAA,OAAO,CAACkB,IAAR,CAAaF,MAAM,CAACG,KAApB;;AACAL,MAAAA,KAAK,CAACP,UAAN;AACA;;AACF;AALF;AAOD,CARD;AASA,eAAeO,KAAf","sourcesContent":["import { EventEmitter } from \"events\";\r\nimport Dispatcher from \"../appDispatcher\";\r\nimport actionType from \"../actions/actionTypes\";\r\nconst CHANGE_EVENT = \"change\";\r\nlet _novels = [];\r\n\r\nclass NovelStore extends EventEmitter {\r\n  addChangeListener(callback) {\r\n    this.on(CHANGE_EVENT, callback);\r\n  }\r\n\r\n  removeChangeListener(callback) {\r\n    this.removeListener(CHANGE_EVENT, callback);\r\n  }\r\n\r\n  emitChange() {\r\n    this.emit(CHANGE_EVENT);\r\n  }\r\n\r\n  getNovels() {\r\n    return _novels;\r\n  }\r\n\r\n  getNovelsBySlug(slug) {\r\n    return _novels.find((novels) => novels.slug === slug);\r\n  }\r\n}\r\nconst store = new NovelStore();\r\nDispatcher.register((action) => {\r\n  switch (action.actionType) {\r\n    case actionType.CREATE_NOVEL:\r\n      _novels.push(action.novel);\r\n      store.emitChange();\r\n      break;\r\n    default:\r\n  }\r\n});\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}