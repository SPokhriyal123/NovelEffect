{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\Novel-Effect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\Novel-Effect\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\Novel-Effect\\\\src\\\\components\\\\ManageNovels.js\";\nimport React, { useState, useEffect } from \"react\";\nimport NovelForm from \"./NovelForm\";\nimport novelStore from \"../stores/novelStore\";\nimport * as novelAction from \"../actions/novelAction\";\nimport { toast } from \"react-toastify\";\n\nconst ManageNovels = props => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        errors = _useState2[0],\n        setErrors = _useState2[1];\n\n  const _useState3 = useState(novelStore.getNovels()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        novel = _useState4[0],\n        setNovel = _useState4[1];\n\n  const _useState5 = useState({\n    id: null,\n    slug: \"\",\n    name: \"\",\n    authorId: null,\n    description: \"\"\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        novels = _useState6[0],\n        setNovels = _useState6[1];\n\n  useEffect(() => {\n    novelStore.addChangeListener(onChange);\n    const slug = props.match.params.slug;\n\n    if (slug) {\n      setNovels(novelStore.getNovelsBySlug(slug));\n    }\n\n    return () => novelStore.removeChangeListener(onChange);\n  }, [props.match.params.slug]);\n\n  function handleChange({\n    target\n  }) {\n    const updateNovels = _objectSpread({}, novels, {\n      [target.name]: target.value\n    });\n\n    setNovels(updateNovels);\n  }\n\n  function formIsValid() {\n    const _error = {};\n    if (!novels.name) _error.name = \"Name is required\";\n    if (!novels.authorId) _error.authorId = \"Author is required\";\n    if (!novels.description) _error.description = \"Description is required\";\n    setErrors(_error);\n    return Object.keys(_error).length === 0;\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    novelAction.saveNovel(novels).then(() => {\n      props.history.push(\"/novels\");\n      toast.success(\"Novels Saved Successfully\");\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    style: {\n      marginLeft: \"151px\",\n      marginTop: \"20px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Manage Novels\"), React.createElement(NovelForm, {\n    errors: errors,\n    novels: novels,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n};\n\nexport default ManageNovels;","map":{"version":3,"sources":["C:\\Users\\shivani.pokhriyal\\Desktop\\Novel-Effect\\src\\components\\ManageNovels.js"],"names":["React","useState","useEffect","NovelForm","novelStore","novelAction","toast","ManageNovels","props","errors","setErrors","getNovels","novel","setNovel","id","slug","name","authorId","description","novels","setNovels","addChangeListener","onChange","match","params","getNovelsBySlug","removeChangeListener","handleChange","target","updateNovels","value","formIsValid","_error","Object","keys","length","handleSubmit","event","preventDefault","saveNovel","then","history","push","success","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport NovelForm from \"./NovelForm\";\r\nimport novelStore from \"../stores/novelStore\";\r\nimport * as novelAction from \"../actions/novelAction\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ManageNovels = (props) => {\r\n  const [errors, setErrors] = useState({});\r\n  const [novel, setNovel] = useState(novelStore.getNovels());\r\n  const [novels, setNovels] = useState({\r\n    id: null,\r\n    slug: \"\",\r\n    name: \"\",\r\n    authorId: null,\r\n    description: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    novelStore.addChangeListener(onChange);\r\n    const slug = props.match.params.slug;\r\n    if (slug) {\r\n      setNovels(novelStore.getNovelsBySlug(slug));\r\n    }\r\n    return () => novelStore.removeChangeListener(onChange);\r\n  }, [props.match.params.slug]);\r\n\r\n  function handleChange({ target }) {\r\n    const updateNovels = { ...novels, [target.name]: target.value };\r\n    setNovels(updateNovels);\r\n  }\r\n  function formIsValid() {\r\n    const _error = {};\r\n    if (!novels.name) _error.name = \"Name is required\";\r\n    if (!novels.authorId) _error.authorId = \"Author is required\";\r\n    if (!novels.description) _error.description = \"Description is required\";\r\n    setErrors(_error);\r\n    return Object.keys(_error).length === 0;\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (!formIsValid()) return;\r\n    novelAction.saveNovel(novels).then(() => {\r\n      props.history.push(\"/novels\");\r\n      toast.success(\"Novels Saved Successfully\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2 style={{ marginLeft: \"151px\", marginTop: \"20px\" }}>Manage Novels</h2>\r\n      <NovelForm\r\n        errors={errors}\r\n        novels={novels}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManageNovels;\r\n"]},"metadata":{},"sourceType":"module"}