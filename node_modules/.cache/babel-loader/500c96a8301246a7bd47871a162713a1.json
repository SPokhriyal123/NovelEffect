{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\kitchen-stories\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\kitchen-stories\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shivani.pokhriyal\\\\Desktop\\\\kitchen-stories\\\\src\\\\components\\\\ManageNovels.js\";\nimport React, { useState, useEffect } from \"react\";\nimport NovelForm from \"./NovelForm\";\nimport * as novelsApi from \"../api/novelsApis\";\nimport { toast } from \"react-toastify\";\n\nconst ManageNovels = props => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        errors = _useState2[0],\n        setErrors = _useState2[1];\n\n  const _useState3 = useState({\n    id: null,\n    slug: \"\",\n    Name: \"\",\n    AuthorId: null,\n    Description: \"\"\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        novels = _useState4[0],\n        setNovels = _useState4[1];\n\n  useEffect(() => {\n    const slug = props.match.params.slug; // from the path `/courses/:slug`\n\n    if (slug) {\n      novelsApi.getNovelsBySlug(slug).then(_novels => setNovels(_novels));\n    }\n  }, [props.match.params.slug]);\n\n  function handleChange({\n    target\n  }) {\n    setNovels(_objectSpread({}, novels, {\n      [target.name]: target.value\n    }));\n  }\n\n  function formIsValid() {\n    const _errors = {};\n    if (!novels.name) _errors.Name = \"Name is required\";\n    if (!novels.authorId) _errors.authorId = \"Author ID is required\";\n    if (!novels.description) _errors.Description = \"Description is required\";\n    setErrors(_errors); // Form is valid if the errors object has no properties\n\n    return Object.keys(_errors).length === 0;\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    if (!formIsValid()) return;\n    novelsApi.saveNovels(novels).then(() => {\n      props.history.push(\"/novels\");\n      toast.success(\"Noveld Details are saved successfully.\");\n    });\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Manage Course\"), React.createElement(NovelForm, {\n    errors: errors,\n    course: novels,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n};\n\nexport default ManageNovels;","map":{"version":3,"sources":["C:\\Users\\shivani.pokhriyal\\Desktop\\kitchen-stories\\src\\components\\ManageNovels.js"],"names":["React","useState","useEffect","NovelForm","novelsApi","toast","ManageNovels","props","errors","setErrors","id","slug","Name","AuthorId","Description","novels","setNovels","match","params","getNovelsBySlug","then","_novels","handleChange","target","name","value","formIsValid","_errors","authorId","description","Object","keys","length","handleSubmit","event","preventDefault","saveNovels","history","push","success"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,KAAKC,SAAZ,MAA2B,mBAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA,oBACFN,QAAQ,CAAC,EAAD,CADN;AAAA;AAAA,QACvBO,MADuB;AAAA,QACfC,SADe;;AAAA,qBAEFR,QAAQ,CAAC;AACnCS,IAAAA,EAAE,EAAE,IAD+B;AAEnCC,IAAAA,IAAI,EAAE,EAF6B;AAGnCC,IAAAA,IAAI,EAAE,EAH6B;AAInCC,IAAAA,QAAQ,EAAE,IAJyB;AAKnCC,IAAAA,WAAW,EAAE;AALsB,GAAD,CAFN;AAAA;AAAA,QAEvBC,MAFuB;AAAA,QAEfC,SAFe;;AAU9Bd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,IAAI,GAAGJ,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmBP,IAAhC,CADc,CACwB;;AACtC,QAAIA,IAAJ,EAAU;AACRP,MAAAA,SAAS,CAACe,eAAV,CAA0BR,IAA1B,EAAgCS,IAAhC,CAAsCC,OAAD,IAAaL,SAAS,CAACK,OAAD,CAA3D;AACD;AACF,GALQ,EAKN,CAACd,KAAK,CAACU,KAAN,CAAYC,MAAZ,CAAmBP,IAApB,CALM,CAAT;;AAOA,WAASW,YAAT,CAAsB;AAAEC,IAAAA;AAAF,GAAtB,EAAkC;AAChCP,IAAAA,SAAS,mBACJD,MADI;AAEP,OAACQ,MAAM,CAACC,IAAR,GAAeD,MAAM,CAACE;AAFf,OAAT;AAID;;AAED,WAASC,WAAT,GAAuB;AACrB,UAAMC,OAAO,GAAG,EAAhB;AAEA,QAAI,CAACZ,MAAM,CAACS,IAAZ,EAAkBG,OAAO,CAACf,IAAR,GAAe,kBAAf;AAClB,QAAI,CAACG,MAAM,CAACa,QAAZ,EAAsBD,OAAO,CAACC,QAAR,GAAmB,uBAAnB;AACtB,QAAI,CAACb,MAAM,CAACc,WAAZ,EAAyBF,OAAO,CAACb,WAAR,GAAsB,yBAAtB;AAEzBL,IAAAA,SAAS,CAACkB,OAAD,CAAT,CAPqB,CAQrB;;AACA,WAAOG,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,MAArB,KAAgC,CAAvC;AACD;;AAED,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAI,CAACT,WAAW,EAAhB,EAAoB;AACpBtB,IAAAA,SAAS,CAACgC,UAAV,CAAqBrB,MAArB,EAA6BK,IAA7B,CAAkC,MAAM;AACtCb,MAAAA,KAAK,CAAC8B,OAAN,CAAcC,IAAd,CAAmB,SAAnB;AACAjC,MAAAA,KAAK,CAACkC,OAAN,CAAc,wCAAd;AACD,KAHD;AAID;;AAED,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,SAAD;AACE,IAAA,MAAM,EAAE/B,MADV;AAEE,IAAA,MAAM,EAAEO,MAFV;AAGE,IAAA,QAAQ,EAAEO,YAHZ;AAIE,IAAA,QAAQ,EAAEW,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAWD,CAxDD;;AA0DA,eAAe3B,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport NovelForm from \"./NovelForm\";\r\nimport * as novelsApi from \"../api/novelsApis\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ManageNovels = (props) => {\r\n  const [errors, setErrors] = useState({});\r\n  const [novels, setNovels] = useState({\r\n    id: null,\r\n    slug: \"\",\r\n    Name: \"\",\r\n    AuthorId: null,\r\n    Description: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const slug = props.match.params.slug; // from the path `/courses/:slug`\r\n    if (slug) {\r\n      novelsApi.getNovelsBySlug(slug).then((_novels) => setNovels(_novels));\r\n    }\r\n  }, [props.match.params.slug]);\r\n\r\n  function handleChange({ target }) {\r\n    setNovels({\r\n      ...novels,\r\n      [target.name]: target.value,\r\n    });\r\n  }\r\n\r\n  function formIsValid() {\r\n    const _errors = {};\r\n\r\n    if (!novels.name) _errors.Name = \"Name is required\";\r\n    if (!novels.authorId) _errors.authorId = \"Author ID is required\";\r\n    if (!novels.description) _errors.Description = \"Description is required\";\r\n\r\n    setErrors(_errors);\r\n    // Form is valid if the errors object has no properties\r\n    return Object.keys(_errors).length === 0;\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (!formIsValid()) return;\r\n    novelsApi.saveNovels(novels).then(() => {\r\n      props.history.push(\"/novels\");\r\n      toast.success(\"Noveld Details are saved successfully.\");\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>Manage Course</h2>\r\n      <NovelForm\r\n        errors={errors}\r\n        course={novels}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManageNovels;\r\n"]},"metadata":{},"sourceType":"module"}